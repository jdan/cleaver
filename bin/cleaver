#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var Cleaver = require(path.join(__dirname,'../lib/cleaver.js'));
var program = require('commander');

/**
 * Helper function to use the cleaver API to create and save a new
 * presentation
 */
function createAndSave(file, cache) {
  fs.readFile(file, 'utf-8', function (err, contents) {
    var presentation = new Cleaver(contents, path.resolve(path.dirname(file)), cache);
    var promise = presentation.run();

    promise
      .then(function (product) {
        var outputFile = presentation.metadata.output || path.basename(file, '.md') + '-cleaver.html';
        fs.writeFile(outputFile, product);
      })
      .fail(function (err) {
        process.stderr.write('!! ' + err.message + '\n');
        process.exit(1);
      });
  });
}

program
  .version(require('../package.json').version)
  .option('-c, --cache', 'cache http response content')
  .usage('[command] [file]');

program
  .command('watch')
  .description('Watch for changes on markdown file')
  .action(function(){
    var file = program.args[0];
    createAndSave(file, program.cache);

    console.log('Watching for changes on ' + file + '. Ctrl-C to abort.');
    fs.watchFile(file, { persistent: true, interval: 100 }, function () {
      console.log('Rebuilding: ' + new Date());
      createAndSave(file, program.cache);
    });
  });

program.parse(process.argv);

if (!program.args.length) {
  program.help();
} else {
  createAndSave(program.args[0], program.cache);
}

